<?php

/**
 * @file
 * Contains italo_module.module.
 */

use Drupal\views\Plugin\views\query\Sql;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\media\Entity\Media;
use Drupal\media\MediaInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Field\FieldItemList;
use Drupal\views\Plugin\views\ViewsPluginInterface;
use Drupal\file\FileInterface;

/**
 * Implements hook_page_attachments().
 */
function italo_module_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'italo_module/common';
  $page['#attached']['library'][] = 'italo_module/leaflet_map_interactions';
  // $page['#attached']['library'][] = 'italo_module/leaflet_node_forced_bounds';
  $page['#attached']['library'][] = 'italo_module/leaflet-arrowheads';
  $page['#attached']['library'][] = 'italo_module/leaflet_drupal_overrides';
}

/**
 * Implements hook_views_query_alter().
 */
function italo_module_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {

  // NOTE: it looks the following is not needed anynmore, because of the last
  // improvements we did in the granularity of field_image (now = 1),and the
  // use of Distinct query option in the view.
  // Avoiding Paragraphs Duplications in Geoplaces Leaflet Map View.
  // @see https://www.drupal.org/project/paragraphs/issues/2941499
  if ($view->storage->id() == 'geo_places' && $query instanceof Sql) {
    $query->addField('paragraphs_item_field_data_node__field_components', 'id', '', ['function' => 'groupby']);
    $query->addGroupBy('paragraphs_item_field_data_node__field_components.id');
  }

}

/**
 * Implements hook_entity_base_field_info().
 *
 * Generate the Geoimage Caption computed field.
 */
function italo_module_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() === 'media') {
    // Add a field that shows a Geoimage Caption.
    $fields['geoimage_caption'] = BaseFieldDefinition::create('string')
      ->setName('geoimage_caption')
      ->setLabel(t('Geoimage Caption'))
      ->setComputed(TRUE)
      ->setClass('\Drupal\italo_module\GeoimageCaptionFieldItemList')
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'region' => 'hidden',
      ]);
  }

  if ($entity_type->id() === 'paragraph') {
    // Add a field that represent the Paragraph Geofield Marker Uri path.
    $fields['geomarker_icon_url'] = BaseFieldDefinition::create('string')
      ->setName('geomarker_icon_url')
      ->setLabel(t('Geo Marker Icon Url'))
      ->setComputed(TRUE)
      ->setClass('\Drupal\italo_module\GeoMarkerIconUrlFieldItemList')
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'region' => 'hidden',
      ]);
  }

  if (in_array($entity_type->id(), ['paragraph', 'media'])) {
    // Add a field that generates the Link to Google Maps location.
    $fields['geofield_googlemaps_link'] = BaseFieldDefinition::create('link')
      ->setName('geofield_googlemaps_link')
      ->setLabel(t('Geofield Google Maps Link'))
      ->setCardinality(-1)
      ->setComputed(TRUE)
      ->setClass('\Drupal\italo_module\GeofieldGoogleMapsLinkFieldItemList')
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'region' => 'hidden',
      ]);
  }

  if ($entity_type->id() === 'node') {

    // Add a field that defines the Geoimage Storing Folder.
    $fields['geoimage_storing_folder'] = BaseFieldDefinition::create('string')
      ->setName('geoimage_storing_folder')
      ->setLabel(t('Geoimage Storing Folder'))
      ->setComputed(TRUE)
      ->setClass('\Drupal\italo_module\GeoimageStoringFolderFieldItemList')
      ->setDisplayConfigurable('view', FALSE);

    // Add a field that defines the Active Status of node.
    $fields['active_status'] = BaseFieldDefinition::create('boolean')
      ->setName('active_status')
      ->setLabel(t('Active Status'))
      ->setComputed(TRUE)
      ->setClass('\Drupal\italo_module\ActiveStatusFieldItemList')
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayConfigurable('view', FALSE)
      ->setTranslatable(FALSE)
      ->setRevisionable(FALSE)
      ->setCardinality(1);

  }
  return $fields;
}

/**
 * Implements hook_views_data_alter().
 */
function italo_module_views_data_alter(array &$data) {

  // In case of Paragraphs based views.
  if (isset($data['paragraphs_item'])) {
    // Add the Geo Marker Icon Url field to Views.
    $data['paragraphs_item']['geomarker_icon_url'] = [
      'title' => t('Geo Marker Icon Url'),
      'field' => [
        'id' => 'field',
        'default_formatter' => 'string',
        'field_name' => 'geomarker_icon_url',
      ],
    ];

    // Add the Geo Marker Icon Url field to Views.
    $data['paragraphs_item']['geofield_googlemaps_link'] = [
      'title' => t('Geofield Google Maps Link'),
      'field' => [
        'id' => 'field',
        'default_formatter' => 'link',
        'field_name' => 'geofield_googlemaps_link',
      ],
    ];

  }

  // In case of Nodes based views.
  if (isset($data['node'])) {

    // Add the geoimage_storing_folder field to Views.
    $data['node']['geoimage_storing_folder'] = [
      'title' => t('Geoimage Storing Folder'),
      'field' => [
        'id' => 'field',
        'default_formatter' => 'string',
        'field_name' => 'geoimage_storing_folder',
      ],
    ];

    $data['node']['active_status'] = [
      'title' => t('Status'),
      'field' => [
        'id' => 'field',
        'default_formatter' => 'boolean',
        'field_name' => 'active_status',
      ],
    ];

    // Custom views filter for an existing date range field.
    // @see https://www.lilengine.co/articles/custom-views-filter-existing-daterange-field
    $data['node__field_date_range']['active_status'] = [
      'filter' => [
        'title' => t('Status'),
        'group' => t('Content'),
        'help' => t('Show Active / Inactive Status Contents with a filter.'),
        'field' => 'field_date_range_value',
        'id' => 'date_range_active_status_filter',
      ],
    ];

  }
}

/**
 * Implements hook_ENTITY_TYPE_view() for node entities.
 *
 * Define leaflet 'node_forced_bounds' for specific Node Bundles to dynamically
 * zoom the Leaflet Map on those referenced by the Node being Viewed.
 */
function italo_module_node_view(array &$build, NodeInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  // Define an array on Node Bundles to which apply this functional logic.
  $node_bundles_start_zooms = [
    'geoplace' => 17,
    'territorial_report' => 17,
    'event' => 17,
  ];
  if ($view_mode === 'full' && array_key_exists($node->bundle(), $node_bundles_start_zooms)) {
    // Initialise a geofield array that will be populated with Geo Points of
    // Forced Leaflet Map Bounds.
    switch ($node->bundle()) {
      case 'geoplace':
      case 'territorial_report':
      case 'event':

        $geofields = [];

        // Intersect eventual Geofield on the node itself.
        if ($node->field_geofield instanceof FieldItemList) {
          foreach ($node->get('field_geofield')->getValue() as $geofield) {
            $geofields[] = $geofield['value'];
          }
        }

        // Extract Paragraphs components from the field_components.
        $components = $node->get('field_components')->getValue();
        foreach ($components as $component) {
          /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
          $paragraph = Paragraph::load($component['target_id']);

          // If the Component paragraph already contains a geofield use and
          // add it.
          if ($paragraph->field_geofield) {
            $geofields[] = $paragraph->field_geofield->value;
          }
          // Otherwise look for the field_geoimage that should contain Geoimage
          // Media reference, with geofield into it.
          elseif ($paragraph->field_geoimage) {
            $media_references = $paragraph->get('field_geoimage')->getValue();
            foreach ($media_references as $media_reference) {
              /** @var \Drupal\media\Entity\Media $paragraph */
              if ($media = Media::load($media_reference['target_id'])) {
                $geofields[] = $media->field_geofield->value;
              }
            }
          }
        }
        break;
    }
    // If the geofields array is not empty, use it to generate the Forced
    // Leaflet Map Bounds, and pass it into attached js drupal settings.
    if (!empty($geofields)) {
      /** @var Drupal\leaflet\LeafletService $leafletService */
      $leafletService = \Drupal::service('leaflet.service');
      $geofields = $leafletService->leafletProcessGeofield($geofields);

      // Add DrupalSettings for forcing bounds on this specific Node.
      $build['#attached']['drupalSettings']['leaflet']['node_forced_bounds'] = [
        'node_id' => $node->id(),
        'currentPath' => 'node/' . $node->id(),
        'geofields' => $geofields,
        'zoom_start' => $node_bundles_start_zooms[$node->bundle()],
      ];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
/*function italo_module_media_presave(MediaInterface $media) {
  if ($media->bundle() == 'geoimage' && empty($media->field_geofield->value)) {
    $media_title = $media->label();
    throw new \Exception("Geoimage media '{$media_title}' couldn't be Geo-located and was not saved.");
  }
}*/

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * Generate Geoimage Node with Paragraph referencing Geoimage Media, each time
 * a Geoimage Media is generated with 'field_generate_host_content' value equal
 * to TRUE.
 */
function italo_module_media_insert(MediaInterface $media) {

  // If the Media is a Geoimage with a Geofield not empty
  // (it means it was Geo-Located correctly).
  if ($media->bundle() === "geoimage" && !empty($media->field_geofield->value)) {

    // If Media Geoimage Media needs to create an host Geoimage Node.
    if ($media->field_generate_host_content->value === TRUE && $title = $media->field_address->value) {
      $user = \Drupal::currentUser();
      // Create/Save the Geoimage Paragraph, referencing the Geoimage Media.
      $paragraph_geoimage_data = [
        'type' => 'geoimage',
        'field_geoimage' => [
          'target_id' => $media->id(),
        ],
      ];

      // If the Media Project Namespace field is 'Vaganti' (target_id: 53).
      if ($media->get('field_project_namespace')->target_id == 53) {
        $paragraph_geoimage_data['field_exclude_from_map_bounds'] = FALSE;
      }

      $paragraph_geoimage = Paragraph::create($paragraph_geoimage_data);
      $paragraph_geoimage->save();

      // Create the Geoimage Node data, with field_components referencing.
      // the created Geoimage Paragraph.
      $geoimage_node_data = [
        'type' => "geoimage",
        'title' => $title,
        'uid' => $user->id(),
        'status' => 1,
        'langcode' => \Drupal::service('language_manager')->getDefaultLanguage()->getId(),
        'field_components' => [
          [
            'target_id' => $paragraph_geoimage->id(),
            'target_revision_id' => $paragraph_geoimage->getRevisionId(),
          ],
        ],
      ];

      // If the Media Project Namespace field is 'Vaganti' (target_id: 53).
      if ($media->get('field_project_namespace')->target_id == 53) {
        // Set the Geoimage Project Namespace field as 'Vaganti'(target_id: 53).
        $geoimage_node_data['field_project_namespace'] = [
          ['target_id' => 53],
        ];
        $geoimage_node_data['field_classname'] = 'opacity-75';
      }

      // Create/Save the Geoimage Node, with Geoimage Paragraph/Geoimage Media.
      $geoimage_node = Node::create($geoimage_node_data);
      try {
        $geoimage_node->save();
      }
      catch (\Exception $e) {
        \Drupal::logger('italo module - media_library_importer')->error($e->getMessage());
      }
    }
  }
  // Otherwise if the Media is a Geoimage not Geo-Located (geofield is empty),
  // then we delete it (and its source file) and log consequently.
  elseif ($media->bundle() === "geoimage" && empty($media->field_geofield->value)) {
    \Drupal::logger('italo module - media_library_importer')->warning("Geoimage '{$media->label()}' couldn't be Geo-Located and is being deleted");
    try {
      // Remove the Geoimage Media (not Geo-Located).
      $media->delete();
      // Also remove the source file that couldn't be geo-located
      // (missing EXIF geo info).
      $file_uri = $media->field_media_image->value;
      if (!empty($file_uri)) {
        unlink($media->field_media_image->value);
      }
    }
    catch (\Exception $e) {
      \Drupal::logger('italo module - media_library_importer')->error($e->getMessage());
    }
  }
}

/**
 * Implements hook_leaflet_views_features_group_alter().
 */
function italo_module_leaflet_views_features_group_alter(array &$group, ViewsPluginInterface &$view_style) {
  if ($group["group_label"] == 'Segnalazione Territoriale') {
    $group["weight"] = -10;
  }
}

/**
 * Implements hook_alter_media_library_importer_media_extra_fields().
 */
function italo_module_alter_media_library_importer_media_extra_fields(FileInterface $file, string $file_url, string $uri, array &$extra_fields) {
  $extra_fields['field_generate_host_content'] = TRUE;
  if (str_contains($file_url, 'Vaganti_Images')) {
    // Set the Media Project Namespace field as 'Vaganti' (target_id: 53).
    $extra_fields['field_project_namespace'] = [
      ['target_id' => 53],
    ];
  }
}
